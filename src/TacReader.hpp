/**
 * @file TacReader.hpp
 * @brief Definition of tac reader object, use it to parse a tac code 
 * 
 */
#ifndef TACREADER_HPP
#define TACREADER_HPP

// C++ includes
#include <vector>

// Local includes
#include "Lexer.hpp"
// autogenerated by Bison, don't panic
// if your IDE can't resolve it - call make first
#include "_Parser.hpp"

namespace TacRunner {

// forward declare our simplistic AST node class so we
// can declare container for it without the header
class Tac;

/**
 * This class is the interface for our scanner/lexer. The end user
 * is expected to use this. It drives scanner/lexer, keeps
 * parsed AST and generally is a good place to store additional
 * context data. Both parser and lexer have access to it via internal 
 * references.
 * 
 * I know that the AST is a bit too strong word for a simple
 * vector with nodes, but this is only an example. Get off me.
 */
class TacReader
{
public:
    TacReader();
    
    /**
     * Run parser. Results are stored inside. Will read from STDIN
     * @return 0 on success, 1 on failure
     */
    int parse();
    
    /**
     * @brief Run parser over a file given by name
     * 
     * @param filename file where to read tokens from
     * @return Success status, 0 on success, 1 on failure
     */
    int parse(const std::string& filename);

    inline std::vector<Tac> get_parsed_program() const
    {
        return m_instructions;
    }

    /**
     * @brief Run parsing over the given filename and return result in provided 
     *        vector, clean stored buffer afterwards
     * @param filename file to parse
     * @param out_instructions vector where the instructions will be stored
     * @return Success status, 0 on success, 1 on failure
     */
    int parse(const std::string& filename, std::vector<Tac> &out_instructions);

    /**
     * Clear AST
     */
    void clear();
    
    /**
     * Print AST
     */
    std::string str() const;
    
    /**
     * Switch scanner input stream. Default is standard input (std::cin).
     * It will also reset AST.
     */
    void switch_input_stream(std::istream *is);
    
    /**
     * This is needed so that Scanner and Parser can call some
     * methods that we want to keep hidden from the end user.
     */
    friend class Parser;
    friend class Scanner;
    
private:
    /**
     * @brief Used internally to add instructions
     * 
     * @param tac Instruction to add to the internal instruction buffer m_instructions
     */
    void add_tac_instruction(const Tac &tac);
    
private:
    std::vector<Tac> m_instructions; // Tac Program
    Lexer m_scanner;                 // Scanner object
    Parser m_parser;                 // Parser object
};

}

#endif // TACREADER_HPP